# -*- coding: utf-8 -*-
"""Copy of DDOS_CLASS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GKcOJkrUm3-8BH-8yRMmC2o-iptj6kc5
"""

#grant access to drive unit
from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
!pwd  #show current path
#change floder
# %cd "/content/gdrive/Shareddrives/Proyecto Seguridad/Documentos"
!pwd  #show current path
!ls   #show files in current path

!pip install scikit-learn==0.19.2

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from google.colab import files
#import tensorflow_decision_forests as tfdf
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn import tree
import graphviz

!pip install sklearn_porter

from sklearn_porter import Porter

!nvidia-smi

!pip install ipaddress

import ipaddress

df = pd.read_csv('AppDDoS.csv',header=0)
df=df.drop(['srcip','srcport','dstip','dstport','proto','dscp'], axis=1)
#x=df[['srcip']]
#y=df[['dstip']]
#x=x.applymap(lambda y:int(ipaddress.IPv4Address(y)))
#y=y.applymap(lambda w:int(ipaddress.IPv4Address(w)))
#df[['srcip']]=x
#df[['dstip']]=y
df=df.replace(["normal","ddossim","goldeneye","hulk","rudy","slowbody2","slowheaders","slowloris","slowread"],[1,2,3,4,5,6,7,8,9])
X = df.drop(['class'], axis=1)
y = df[['class']]

X_train, X_test, y_train, y_test =  train_test_split(X, y, test_size=0.20)

df = pd.read_csv('AppDDoS.csv',header=0)
df=df.drop(['srcip','dstip'], axis=1)
df=df.replace(["normal","ddossim","goldeneye","hulk","rudy","slowbody2","slowheaders","slowloris","slowread"],[1,2,3,4,5,6,7,8,9])
X = df.drop(['class'], axis=1)
y = df[['class']]

X_train, X_test, y_train, y_test =  train_test_split(X, y, test_size=0.20)

#tree_clf = DecisionTreeClassifier(max_depth = 4)
#tree_clf.fit(X_train,y_train)
rnd_clf = RandomForestClassifier(n_estimators=300,criterion="entropy",max_depth=8,oob_score=True,max_leaf_nodes=40,max_features=16,n_jobs=1)
rnd_clf.fit(X_train, y_train)

porter = Porter(rnd_clf,language='java')
output = porter.export(embed_data=True)

text_file = open("model.java", "w")
text_file.write(output)
text_file.close()

# dot is a graph description language
colnames=df.columns.values.tolist()
dot = tree.export_graphviz(tree_clf, out_file=None, 
                           feature_names=colnames[:46],
                           class_names=["normal","ddossim","goldeneye","hulk","rudy","slowbody2","slowheaders","slowloris","slowread"],
                           filled=True, rounded=True,  
                           special_characters=True) 

# we create a graph from dot source using graphviz.Source
graph = graphviz.Source(dot) 
graph

y_pred_rf= rnd_clf.predict(X_test)
print("random forest", accuracy_score(y_test, y_pred_rf))
print(rnd_clf)

proba=rnd_clf.predict_proba(np.array([[15,4038,13,1836,52,269,1500,507,52,141,628,216,1,25,299,79,1,27,299,85,351,351,351,351,0,0,0,0,0,15,4038,13,1836,1,1,0,0,788,684,1276318784,1276319135,1276319111]]))
pred=rnd_clf.predict(np.array([[15,4038,13,1836,52,269,1500,507,52,141,628,216,1,25,299,79,1,27,299,85,351,351,351,351,0,0,0,0,0,15,4038,13,1836,1,1,0,0,788,684,1276318784,1276319135,1276319111,]]))
print(pred)
print(proba)

import seaborn as sns
sns.set_theme(style="ticks")
g = sns.PairGrid(df)
g.map(sns.scatterplot)

g.savefig("out.png")